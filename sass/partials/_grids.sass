// Settings variables
$column-number: 12 !default
$gutter-width: 30px !default
$active-media: false
$default-row-behavior: default

// Mixin to set rows to behave as wrappers and have a max-width. This will also
// cause them to not have a negative left and right margin either, so columns
// will not be aligned with the siblings of the row.
/// @param {String} $behavior [default] - `wrapper` or `default`
@mixin reset-row-behavior($behavior:default)
    @if $behavior == "default" or $behavior == "wrapper"
        $default-row-behavior: $behavior !global


// Other variables
$breakpoints: ()
$word-ratios: ('half':0.5,'one-half':0.5,'third':0.3333333,'one-third':0.3333333,'two-thirds':0.6666667,'quarter':0.25,'one-quarter':0.25,'two-quarters':0.5,'three-quarters':0.75,'full':1,'whole':1)



// Function to return a decimal ratio of the $part to the $whole
@function get-ratio($part, $whole)
    // If the $part is greater that the $whole, return 1 (ratio of 100%)
    // Otherwise, return the part divided by the whole
    @if $part >= $whole
        @return 1
    @else
        @return $part / $whole



// Function to return a ratio, including when a string is passed as a parameter
@function get-ratio-num($param)
    @if type-of($param) == number
        @return get-ratio($param, $column-number)
    @else if type-of($param) == list
        @return nth-of-type($param,number) / nth-of-type($param,number,2)
    @else if type-of($param) == string
        @if map-get($word-ratios,$param)
            @debug "Matched word ratio"
            @return map-get($word-ratios,$param)
        @else
            $space: ' '
            $new_list: ()
            $param: str-split($param, $space)
            @for $i from 1 through length($param)
                $item: nth($param, $i)
                @if is-number($item) == true
                    $item: to-number($item)
                $new_list: append($new_list, $item)
            // @debug $new_list
            @return get-ratio-num($new_list)
    @else
        @return false



@mixin set-col-width($width)
    $ratio: 0
    $ratio: get-ratio-num($width)
    width: $ratio * 100%



/// Creates a "breakpoint" for resizing columns with media queries. Creating a
/// breakpoint will cause all rows will have a maximum width specified by that
/// breakpoint. Not supplying the `$prefix-break` parameter (or setting it as
/// `0`) will set the minimum breakpoint (usually the "mobile" breakpoint).
/// @example
///   // This breakpoint is the minimum breakpoint
///   @include set-breakpoint('xs')
///
///   // This breakpoint is only active when the screen is at least 768px wide,
///   // and the rows will have a max-width of 700px.
///   @include set-breakpoint('sm', 768px, 700px)
/// @param {String} $prefix - Prefix name that the breakpoint can be accessed by
/// @param {Number} $prefix-break [0] - The minimum width of the screen, in pixels, for this breakpoint
/// @param {Number} $prefix-width [none] - The max-width of the rows for this breakpoint
@mixin set-breakpoint($prefix, $prefix-break: 0, $prefix-width: none)
    $breakpoint: ('prefix': $prefix, 'breakpoint-width': $prefix-break, 'wrapper-width': $prefix-width)
    $breakpoints: append($breakpoints, $breakpoint, comma) !global
    @if $prefix-break > 0
        @media screen and (min-width: $prefix-break)
            %wrapper
                max-width: $prefix-width
    @else
        %wrapper
            max-width: $prefix-width



/// Mixin to alias media queries, based on the breakpoints created with the
/// `set-breakpoint` mixin. Requires one or more breakpoints.
/// @example
///   // Set a breakpoint to use
///   @include set-breakpoint('sm', 768px, 700px)
///
///   @include media('sm')
///       // Rules here are applied when the device screen is at least 768px wide
/// @param {String} $prefix - The name of the breakpoint
/// @require {mixin} set-breakpoint
@mixin media($prefix)
    $index: maps-match($breakpoints,'prefix',$prefix)
    @if $index == false
        @error 'Cartilage Error: No breakpoint has been defined with the prefix "#{$prefix}".'
    $breakpoint: nth($breakpoints,$index)
    $breakpoint-width: map-get($breakpoint,'breakpoint-width')
    $breakpoint-wrapper: map-get($breakpoint, 'wrapper-width')
    $active-media: true !global
    @media screen and (min-width: $breakpoint-width)
        @content
    $active-media: false !global



@mixin wrapper()
    @extend %wrapper !optional
    margin-left: auto
    margin-right: auto



/// Mixin to designate a selector as a row. By default, rows do not have a
/// max-width, so they need to be nested inside of an element that is designated
/// as a `wrapper`. Rows also have the `wrap` mixin (aka `clearfix`), so rows
/// with columns will self-clear.
///
/// **Deprecated Behavior:**
///
/// Rows can have a `max-width` and behave like a `wrapper` if the
/// `row-behavior` mixin is included with the parameter 'wrapper'. See the
/// `row-behavior` mixin for more details.
/// @example
///   // This row will change its max-width based on the screen size, based
///   // on the max-widths specified for the breakpoints
///   @include row-behavior('wrapper')
///
///   .example-class1
///       @include row
///
///   // This row will not be limited by a max-width
///   .example-class2
///       @include row(full)
/// @param {String} $params... - Accepts multiple space-separated or comma-separated parameters. Currently, the only acceptable parameter is `full`, which causes the row not be limited by a max-width.
@mixin row($params...)
    // Set styling rules for row element
    @include wrap
    display: block
    @if $default-row-behavior == "default"
        margin-left: 0 - ($gutter-width / 2)
        margin-right: 0 - ($gutter-width / 2)
    @else if $default-row-behavior == "wrapper"
        // If 'full' is passed as a parameter, ignore wrapper min-widths
        // Otherwise, default row behavior is to have the min-widths for wrappers
        @if list-has-value($params,'full')
            max-width: none
        @else if $active-media == false
            @include wrapper
        @else if $active-media
            @warn "Cartilage Warning: Selectors don't need the row mixin within the media mixin. Instead, you should only include the row mixin with the selector outside of the media mixin."



@mixin column-base()
    position: relative
    float: left
    padding-left: $gutter-width / 2
    padding-right: $gutter-width / 2



/// Mixin to designate a selector as a column. Columns are not required to be
/// placed within rows, but columns are floated, so their parent element needs
/// to self-clear one way or another. Columns float to the left by default, and
/// padding on the left and the right that is half of the `$gutter-width`.
///
/// **Accepted Values for $width:**
/// - `(Number)`: Sets the width as being equal to `($width / $column-number)`.
/// - `full` or `whole`: Sets the width as `100%`.
/// - `half` or `one-half`: Sets the width as `50%`.
/// - `third` or `one-third`: Sets the width as `33.33333%`.
/// - `two-thirds`: Sets the width as `66.66667%`.
/// - `quarter` or `one-quarter`: Sets the width as `25%`.
/// - `two-quarters`: Sets the width as `50%`.
/// - `three-quarters`: Sets the width as `75%`.
/// - `'(Number) out of (Number)'`: Sets the widths as being equal to
/// `($width / $column-number)`, by using the first `(number)` as `$width` and
/// using the second `(number)` as `$column-number`. Any string or symbol (one
/// or multiple) can be used as a separator between the two `(number)`s,
/// as long as all are wrapped in single or double quotes to prevent any math
/// symbols from changing the value before the function runs.
///
/// **Accepted $params:**
/// - `center`: Centers the column in its own row, removing the left float and
/// clearing other columns.
/// - `right`: Floats the column to the left, rather than the right.
/// @param {Number | String} $width - The width of the column. See description for accepted values.
/// @param {String} $params... - Additional parameters. See description for accepted values.
@mixin column($width,$params...)
    display: block
    @include column-base
    // If 'center' is passed as a parameter, don't float the column and apply auto side margins
    @if list-has-value($params,'center')
        float: none
        margin-left: auto
        margin-right: auto
    // If 'right' is passed as a parameter, float the column to the right instead of the left
    @if list-has-value($params,'right')
        float: right
    @include set-col-width($width)



/// Mixin to offset a column or other element. Uses the same paramters for
/// calculating width as `column` mixin.
///
/// **Accepted $params:**
/// - `right`: Adds margin on the right of the element, intsead of the left.
/// @param {Number | String} $width - The number of columns to offset by. See description of `column` mixin for accepted values.
/// @param {String} $params... - Additional parameters. See description for accepted values.
/// @see {mixin} column
@mixin offset($width,$params...)
    $ratio: 0
    $ratio: get-ratio-num($width)
    @if list-has-value($params,'right')
        margin-right: $ratio * 100%
    @else
        margin-left: $ratio * 100%

/// Mixin to "push" a column element to the right. Generally used in combination
/// with the `pull` mixin
/// @param {Number | String} $width - The distance to "push". See description of `column` mixin for accepted values.
/// @see {mixin} column
/// @see {mixin} pull
@mixin push($width)
    $ratio: get-ratio-num($width)
    left: $ratio * 100%

/// Mixin to "pull" a column element to the left. Generally used in combination
/// with the `push` mixin
/// @param {Number | String} $width - The distance to "pull". See description of `column` mixin for accepted values.
/// @see {mixin} column
/// @see {mixin} push
@mixin pull($width)
    $ratio: get-ratio-num($width)
    right: $ratio * 100%
